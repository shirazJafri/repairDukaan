{"ast":null,"code":"import { registerRootComponent } from 'expo';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport logInReducer from \"./reducers/logIn\";\nimport App from \"./App\";\nimport AppRegistry from \"react-native-web/dist/exports/AppRegistry\";\nimport { render } from 'react-dom';\nimport { Component } from 'react';\nregisterRootComponent('App');","map":{"version":3,"sources":["D:/LogIn/index.js"],"names":["registerRootComponent","createStore","Provider","logInReducer","App","render","Component"],"mappings":"AAAA,SAASA,qBAAT,QAAsC,MAAtC;AACA,SAAQC,WAAR,QAA0B,OAA1B;AACA,SAAQC,QAAR,QAAuB,aAAvB;AACA,OAAOC,YAAP;AAEA,OAAOC,GAAP;;AAEA,SAASC,MAAT,QAAuB,WAAvB;AACA,SAASC,SAAT,QAA0B,OAA1B;AAiBAN,qBAAqB,CAAC,KAAD,CAArB","sourcesContent":["import { registerRootComponent } from 'expo';\nimport {createStore} from 'redux';\nimport {Provider} from 'react-redux';\nimport logInReducer from './reducers/logIn'\n\nimport App from './App';\nimport { AppRegistry } from 'react-native';\nimport { render } from 'react-dom';\nimport { Component } from 'react';\n\n/*const store = createStore(logInReducer,  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nclass Root extends Component {\n    render() {\n        return (\n            <Provider store = {store}>\n                <App />\n            </Provider>\n        )\n    }\n}*/\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in the Expo client or in a native build,\n// the environment is set up appropriately\nregisterRootComponent('App')"]},"metadata":{},"sourceType":"module"}