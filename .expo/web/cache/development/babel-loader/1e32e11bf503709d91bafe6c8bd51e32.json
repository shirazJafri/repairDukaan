{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _Transition = require(\"./Transition\");\n\nvar _this = this,\n    _jsxFileName = \"/Users/adityajamuar/Sites/projects/nativebase/NativeBase/src/components/composites/Transitions/PresenceTransition.tsx\";\n\nvar PresenceTransition = function PresenceTransition(_ref, ref) {\n  var _ref$visible = _ref.visible,\n      visible = _ref$visible === void 0 ? false : _ref$visible,\n      _onTransitionComplete = _ref.onTransitionComplete,\n      rest = (0, _objectWithoutProperties2.default)(_ref, [\"visible\", \"onTransitionComplete\"]);\n\n  var _React$useState = _react.default.useState(true),\n      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n      animationExited = _React$useState2[0],\n      setAnimationExited = _React$useState2[1];\n\n  if (!visible && animationExited) {\n    return null;\n  }\n\n  return _react.default.createElement(_Transition.Transition, (0, _extends2.default)({\n    visible: visible,\n    onTransitionComplete: function onTransitionComplete(state) {\n      if (state === 'exited') {\n        setAnimationExited(true);\n      } else {\n        setAnimationExited(false);\n      }\n\n      _onTransitionComplete && _onTransitionComplete(state);\n    }\n  }, rest, {\n    ref: ref,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 5\n    }\n  }));\n};\n\nvar _default = (0, _react.memo)((0, _react.forwardRef)(PresenceTransition));\n\nexports.default = _default;","map":{"version":3,"sources":["PresenceTransition.tsx"],"names":["PresenceTransition","visible","onTransitionComplete","rest","animationExited","setAnimationExited","React","state"],"mappings":";;;;;;;;;;;;;;;AAAA,IAAA,MAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,WAAA,GAAA,OAAA,gBAAA;;;;;AAGA,IAAMA,kBAAkB,GAAlBA,SAAAA,kBAAAA,CAAqB,IAArBA,EAAqB,GAArBA,EAGD;AAAA,MAAA,YAAA,GAAA,IAAA,CAFDC,OAEC;AAAA,MAFDA,OAEC,GAAA,YAAA,KAAA,KAAA,CAAA,GAFS,KAET,GAAA,YAAA;AAAA,MAFgBC,qBAEhB,GAAA,IAAA,CAFgBA,oBAEhB;AAAA,MAFyCC,IAEzC,GAAA,CAAA,GAAA,yBAAA,CAAA,OAAA,EAAA,IAAA,EAAA,CAAA,SAAA,EAAA,sBAAA,CAAA,CAAA;;AAAA,MAAA,eAAA,GAC2CG,MAAAA,CAAAA,OAAAA,CAAAA,QAAAA,CAD3C,IAC2CA,CAD3C;AAAA,MAAA,gBAAA,GAAA,CAAA,GAAA,eAAA,CAAA,OAAA,EAAA,eAAA,EAAA,CAAA,CAAA;AAAA,MACIF,eADJ,GAAA,gBAAA,CAAA,CAAA,CAAA;AAAA,MACqBC,kBADrB,GAAA,gBAAA,CAAA,CAAA,CAAA;;AAEH,MAAI,CAAA,OAAA,IAAJ,eAAA,EAAiC;AAC/B,WAAA,IAAA;AAGF;;AAAA,SACE,MAAA,CAAA,OAAA,CAAA,aAAA,CAAC,WAAA,CAAD,UAAA,EAAA,CAAA,GAAA,SAAA,CAAA,OAAA,EAAA;AACE,IAAA,OAAO,EADT,OAAA;AAEE,IAAA,oBAAoB,EAAE,SAAA,oBAAA,CAAA,KAAA,EAAW;AAC/B,UAAIE,KAAK,KAAT,QAAA,EAAwB;AACtBF,QAAAA,kBAAkB,CAAlBA,IAAkB,CAAlBA;AADF,OAAA,MAEO;AACLA,QAAAA,kBAAkB,CAAlBA,KAAkB,CAAlBA;AAEFH;;AAAAA,MAAAA,qBAAoB,IAAIA,qBAAoB,CAA5CA,KAA4C,CAA5CA;AARJ;AAAA,GAAA,EAAA,IAAA,EAAA;AAWE,IAAA,GAAG,EAXL,GAAA;AAAA,IAAA,MAAA,EAAA,KAAA;AAAA,IAAA,QAAA,EAAA;AAAA,MAAA,QAAA,EAAA,YAAA;AAAA,MAAA,UAAA,EAAA,EAAA;AAAA,MAAA,YAAA,EADF;AACE;AAAA,GAAA,CAAA,CADF;AATF,CAAA;;eA0Be,CAAA,GAAA,MAAA,CAAA,IAAA,EAAK,CAAA,GAAA,MAAA,CAAA,UAAA,EAAL,kBAAK,CAAL,C","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Transition } from './Transition';\nimport type { IPresenceTransitionProps } from './types';\n\nconst PresenceTransition = (\n  { visible = false, onTransitionComplete, ...rest }: IPresenceTransitionProps,\n  ref: any\n) => {\n  const [animationExited, setAnimationExited] = React.useState(true);\n  if (!visible && animationExited) {\n    return null;\n  }\n\n  return (\n    <Transition\n      visible={visible}\n      onTransitionComplete={(state) => {\n        if (state === 'exited') {\n          setAnimationExited(true);\n        } else {\n          setAnimationExited(false);\n        }\n        onTransitionComplete && onTransitionComplete(state);\n      }}\n      {...rest}\n      ref={ref}\n    />\n  );\n};\n\nexport default memo(forwardRef(PresenceTransition));\n"]},"metadata":{},"sourceType":"script"}