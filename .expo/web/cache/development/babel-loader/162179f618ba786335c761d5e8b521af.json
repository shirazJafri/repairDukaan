{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.usePropsResolution = usePropsResolution;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _lodash = _interopRequireDefault(require(\"lodash.get\"));\n\nvar _lodash2 = _interopRequireDefault(require(\"lodash.omit\"));\n\nvar _lodash3 = _interopRequireDefault(require(\"lodash.isnil\"));\n\nvar _lodash4 = _interopRequireDefault(require(\"lodash.merge\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _useNativeBase2 = require(\"../useNativeBase\");\n\nvar _usePlatformProps = require(\"../usePlatformProps\");\n\nvar _colorMode = require(\"../../core/color-mode\");\n\nvar _utils = require(\"./utils\");\n\nvar _tools = require(\"./../../theme/tools\");\n\nvar _base = require(\"./../../theme/base\");\n\nvar _useContrastText = require(\"../useContrastText\");\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar simplifyComponentTheme = function simplifyComponentTheme(theme, componentTheme, incomingProps, colorModeProps, currentBreakpoint) {\n  var combinedProps = (0, _extends2.default)({}, componentTheme.defaultProps, incomingProps);\n  var componentBaseStyle = {};\n\n  if (componentTheme.baseStyle) {\n    componentBaseStyle = typeof componentTheme.baseStyle !== 'function' ? componentTheme.baseStyle : componentTheme.baseStyle((0, _extends2.default)({\n      theme: theme\n    }, combinedProps, colorModeProps));\n  }\n\n  var variant = (0, _utils.resolveValueWithBreakpoint)(combinedProps.variant, currentBreakpoint, 'variant');\n  var componentVariantProps = {};\n\n  if (variant && componentTheme.variants && componentTheme.variants[variant]) {\n    componentVariantProps = typeof componentTheme.variants[variant] !== 'function' ? componentTheme.variants[variant] : componentTheme.variants[variant]((0, _extends2.default)({\n      theme: theme\n    }, combinedProps, colorModeProps));\n    incomingProps.variant = undefined;\n  }\n\n  var size = (0, _utils.resolveValueWithBreakpoint)(combinedProps.size, currentBreakpoint, 'size');\n  var componentSizeProps = {};\n\n  if (size && componentTheme.sizes && componentTheme.sizes[size]) {\n    if (typeof componentTheme.sizes[size] === 'string' || typeof componentTheme.sizes[size] === 'number') {\n      componentSizeProps.size = componentTheme.sizes[size];\n    } else if (typeof componentTheme.sizes[size] === 'function') {\n      componentSizeProps = componentTheme.sizes[size]((0, _extends2.default)({\n        theme: theme\n      }, combinedProps, colorModeProps));\n    } else {\n      componentSizeProps = componentTheme.sizes[size];\n    }\n\n    incomingProps.size = undefined;\n  }\n\n  var componentMergedTheme = (0, _lodash4.default)({}, componentTheme.defaultProps, componentBaseStyle, componentVariantProps, componentSizeProps);\n  return componentMergedTheme;\n};\n\nvar propTranslator = function propTranslator(_ref) {\n  var props = _ref.props,\n      theme = _ref.theme,\n      colorModeProps = _ref.colorModeProps,\n      componentTheme = _ref.componentTheme,\n      currentBreakpoint = _ref.currentBreakpoint;\n  var translatedProps = {};\n\n  for (var property in props) {\n    if (property.startsWith('_')) {\n      var nestedTranslatedProps = propTranslator({\n        props: props[property],\n        theme: theme,\n        colorModeProps: colorModeProps,\n        componentTheme: componentTheme,\n        currentBreakpoint: currentBreakpoint\n      });\n      translatedProps[property] = nestedTranslatedProps;\n    } else if (_base.themePropertyMap[property]) {\n      var propValues = (0, _utils.extractPropertyFromFunction)(property, props, theme, componentTheme);\n\n      if (typeof propValues === 'string' || typeof propValues === 'number') {\n        translatedProps[property] = propValues;\n      } else if (!(0, _lodash3.default)(propValues)) {\n        for (var nestedProp in propValues) {\n          translatedProps[nestedProp] = (0, _lodash.default)(theme, _base.themePropertyMap[nestedProp] + \".\" + propValues[nestedProp], propValues[nestedProp]);\n        }\n\n        delete translatedProps[property];\n      } else if (property === 'shadow') {\n        var resolveValueWithBreakpointValue = (0, _utils.resolveValueWithBreakpoint)(props.shadow, currentBreakpoint, property);\n\n        var shadowProps = theme[_base.themePropertyMap[property]](colorModeProps)[resolveValueWithBreakpointValue];\n\n        translatedProps.style = (0, _lodash4.default)({}, shadowProps, props.style);\n        delete translatedProps[property];\n      } else {\n        translatedProps[property] = (0, _utils.resolveValueWithBreakpoint)(props[property], currentBreakpoint, property);\n      }\n    } else {\n      translatedProps[property] = (0, _utils.resolveValueWithBreakpoint)(props[property], currentBreakpoint, property);\n    }\n  }\n\n  return translatedProps;\n};\n\nvar propsThatCannotHoldNegativityWithStrings = ['m', 'margin', 'padding', 'p'];\n\nvar mutatePropToHandleNegativeVal = function mutatePropToHandleNegativeVal(theme, props, key) {\n  if (props[key] in theme.space) {\n    return;\n  }\n\n  if (typeof props[key] === 'string' && props[key].startsWith('-')) {\n    var parsedNum = +props[key];\n\n    if (!isNaN(parsedNum)) {\n      props[key] = parsedNum;\n    } else if (props[key] === '-') {\n      props[key] = undefined;\n    }\n  }\n};\n\nfunction usePropsResolution(component, incomingProps) {\n  var _useWindowDimensions, _platformSpecificProp, _platformSpecificProp2, _platformSpecificProp3, _platformSpecificProp4, _ref2, _translatedProps$bg, _translatedProps$_tex;\n\n  var _extractInObject = (0, _tools.extractInObject)(incomingProps, ['children', 'onPress', 'icon', 'onOpen', 'onClose']),\n      _extractInObject2 = (0, _slicedToArray2.default)(_extractInObject, 2),\n      ignoredProps = _extractInObject2[0],\n      cleanIncomingProps = _extractInObject2[1];\n\n  var _useNativeBase = (0, _useNativeBase2.useNativeBase)(),\n      theme = _useNativeBase.theme;\n\n  var colorModeProps = (0, _colorMode.useColorMode)();\n  var componentTheme = (0, _lodash.default)(theme, \"components.\" + component);\n  var notComponentTheme = (0, _lodash2.default)(theme, ['components']);\n  var windowWidth = (_useWindowDimensions = (0, _reactNative.useWindowDimensions)()) == null ? void 0 : _useWindowDimensions.width;\n\n  var currentBreakpoint = _react.default.useMemo(function () {\n    return (0, _tools.getClosestBreakpoint)(theme.breakpoints, windowWidth);\n  }, [windowWidth, theme.breakpoints]);\n\n  var componentThemeObject = (0, _usePlatformProps.usePlatformProps)(simplifyComponentTheme(notComponentTheme, componentTheme, cleanIncomingProps, colorModeProps, currentBreakpoint));\n  var componentThemeIntegratedProps = (0, _lodash4.default)({}, componentThemeObject, cleanIncomingProps);\n  var platformSpecificProps = (0, _usePlatformProps.usePlatformProps)(componentThemeIntegratedProps);\n  var ignore = [];\n\n  if ((_platformSpecificProp = platformSpecificProps.bg) != null && _platformSpecificProp.linearGradient || (_platformSpecificProp2 = platformSpecificProps.background) != null && _platformSpecificProp2.linearGradient || (_platformSpecificProp3 = platformSpecificProps.bgColor) != null && _platformSpecificProp3.linearGradient || (_platformSpecificProp4 = platformSpecificProps.backgroundColor) != null && _platformSpecificProp4.linearGradient) {\n    var _platformSpecificProp5, _platformSpecificProp6, _platformSpecificProp7;\n\n    var bgProp = 'bg';\n\n    if ((_platformSpecificProp5 = platformSpecificProps.background) != null && _platformSpecificProp5.linearGradient) {\n      bgProp = 'background';\n    } else if ((_platformSpecificProp6 = platformSpecificProps.bgColor) != null && _platformSpecificProp6.linearGradient) {\n      bgProp = 'bgColor';\n    } else if ((_platformSpecificProp7 = platformSpecificProps.backgroundColor) != null && _platformSpecificProp7.linearGradient) {\n      bgProp = 'backgroundColor';\n    }\n\n    platformSpecificProps[bgProp].linearGradient.colors = platformSpecificProps[bgProp].linearGradient.colors.map(function (color) {\n      return (0, _lodash.default)(theme.colors, color, color);\n    });\n    ignore = ['bg', 'background', 'backgroundColor', 'bgColor'];\n  }\n\n  var _extractInObject3 = (0, _tools.extractInObject)(platformSpecificProps, ignore),\n      _extractInObject4 = (0, _slicedToArray2.default)(_extractInObject3, 2),\n      gradientProps = _extractInObject4[0],\n      nonGradientProps = _extractInObject4[1];\n\n  var translatedProps = propTranslator({\n    props: nonGradientProps,\n    theme: notComponentTheme,\n    colorModeProps: colorModeProps,\n    componentTheme: componentTheme,\n    currentBreakpoint: currentBreakpoint\n  });\n  var bgColor = (_ref2 = (_translatedProps$bg = translatedProps.bg) != null ? _translatedProps$bg : translatedProps.backgroundColor) != null ? _ref2 : translatedProps.bgColor;\n  var contrastTextColor = (0, _useContrastText.useContrastText)(bgColor, translatedProps == null ? void 0 : (_translatedProps$_tex = translatedProps._text) == null ? void 0 : _translatedProps$_tex.color);\n  translatedProps._text = contrastTextColor ? (0, _extends2.default)({\n    color: contrastTextColor\n  }, translatedProps._text) : translatedProps._text;\n  propsThatCannotHoldNegativityWithStrings.forEach(function (key) {\n    if (translatedProps && key in translatedProps) {\n      mutatePropToHandleNegativeVal(theme, translatedProps, key);\n    }\n  });\n  var resolvedProps = (0, _tools.omitUndefined)((0, _extends2.default)({}, translatedProps, ignoredProps, gradientProps));\n  return resolvedProps;\n}","map":{"version":3,"sources":["usePropsResolution.tsx"],"names":["simplifyComponentTheme","combinedProps","componentTheme","componentBaseStyle","theme","variant","componentVariantProps","incomingProps","size","componentSizeProps","componentMergedTheme","propTranslator","props","colorModeProps","currentBreakpoint","translatedProps","property","nestedTranslatedProps","themePropertyMap","propValues","resolveValueWithBreakpointValue","shadowProps","propsThatCannotHoldNegativityWithStrings","mutatePropToHandleNegativeVal","parsedNum","isNaN","ignoredProps","cleanIncomingProps","notComponentTheme","windowWidth","React","componentThemeObject","componentThemeIntegratedProps","platformSpecificProps","ignore","bgProp","gradientProps","nonGradientProps","bgColor","contrastTextColor","color","key","resolvedProps"],"mappings":"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","sourcesContent":["import get from 'lodash.get';\nimport omit from 'lodash.omit';\nimport isNil from 'lodash.isnil';\nimport merge from 'lodash.merge';\nimport { useWindowDimensions } from 'react-native';\nimport { useNativeBase } from '../useNativeBase';\nimport { usePlatformProps } from '../usePlatformProps';\nimport { useColorMode } from '../../core/color-mode';\nimport {\n  resolveValueWithBreakpoint,\n  extractPropertyFromFunction,\n} from './utils';\nimport {\n  getClosestBreakpoint,\n  omitUndefined,\n  extractInObject,\n} from './../../theme/tools';\nimport { themePropertyMap } from './../../theme/base';\nimport { useContrastText } from '../useContrastText';\nimport React from 'react';\n\n/**\n * @summary Resolves, simplify and merge components specific theme.\n * @description The function extract and execute component specifc theme (i.e., `defaultProps`, `baseStyle` and `variants`) and returns a merged and simplified object.\n * @arg {string} theme - Theme object of NativeBase (without component theme).\n * @arg {object} componentTheme - Theme for specific components.\n * @arg {object} incomingProps - Props passed by the user.\n * @arg {object} colorModeProps - `colorMode` object.\n * @returns {object} Resolved component specific theme.\n */\nconst simplifyComponentTheme = (\n  theme: object,\n  componentTheme: {\n    defaultProps?: object;\n    baseStyle?: object | Function;\n    variants?: any | Function;\n    sizes?: any | Function;\n  },\n  incomingProps: object,\n  colorModeProps: object,\n  currentBreakpoint: number\n) => {\n  // Resolving component's defaultProps.\n\n  const combinedProps: any = {\n    ...componentTheme.defaultProps,\n    ...incomingProps,\n  };\n\n  // Resolving component's baseStyle\n  let componentBaseStyle = {};\n  if (componentTheme.baseStyle) {\n    componentBaseStyle =\n      typeof componentTheme.baseStyle !== 'function'\n        ? componentTheme.baseStyle\n        : componentTheme.baseStyle({\n            theme,\n            ...combinedProps,\n            ...colorModeProps,\n          });\n  }\n\n  const variant = resolveValueWithBreakpoint(\n    combinedProps.variant,\n    currentBreakpoint,\n    'variant'\n  );\n\n  let componentVariantProps = {};\n  // Extracting props from variant\n  if (variant && componentTheme.variants && componentTheme.variants[variant]) {\n    componentVariantProps =\n      typeof componentTheme.variants[variant] !== 'function'\n        ? componentTheme.variants[variant]\n        : componentTheme.variants[variant]({\n            theme,\n            ...combinedProps,\n            ...colorModeProps,\n          });\n\n    // We remove variant from original props if we found it in the componentTheme\n    //@ts-ignore\n    incomingProps.variant = undefined;\n  }\n\n  const size = resolveValueWithBreakpoint(\n    combinedProps.size,\n    currentBreakpoint,\n    'size'\n  );\n\n  let componentSizeProps = {};\n  // Extracting props from size\n  if (size && componentTheme.sizes && componentTheme.sizes[size]) {\n    // Type - sizes: {lg: 1}. Refer icon theme\n    if (\n      typeof componentTheme.sizes[size] === 'string' ||\n      typeof componentTheme.sizes[size] === 'number'\n    ) {\n      //@ts-ignore\n      componentSizeProps.size = componentTheme.sizes[size];\n    }\n    // Type - sizes: (props) => ({lg: {px: 1}}). Refer heading theme\n    else if (typeof componentTheme.sizes[size] === 'function') {\n      componentSizeProps = componentTheme.sizes[size]({\n        theme,\n        ...combinedProps,\n        ...colorModeProps,\n      });\n    }\n    // Type - sizes: {lg: {px: 1}}. Refer button theme\n    else {\n      componentSizeProps = componentTheme.sizes[size];\n    }\n\n    // We remove size from original props if we found it in the componentTheme\n    //@ts-ignore\n    incomingProps.size = undefined;\n  }\n\n  const componentMergedTheme = merge(\n    {},\n    componentTheme.defaultProps,\n    componentBaseStyle,\n    componentVariantProps,\n    componentSizeProps\n  );\n\n  return componentMergedTheme;\n};\n\n/**\n * @summary Translates the prop with it's appropriate value.\n * @description NOTE: Avoid passo  JSX and functions.\n * @arg {any} props - Props object with should be translated.\n * @arg {any} theme - Theme based on which props will be translated.\n * @arg {object} colorModeProps - `colorMode` object.\n * @arg {object} componentTheme - Theme for specific components.\n * @arg {object} windowWidth - Current width of the window / screen.\n * @returns {object} Translated props object.\n */\n// Todo - move responsive calculation in styled system\nconst propTranslator = ({\n  props,\n  theme,\n  colorModeProps,\n  componentTheme,\n  currentBreakpoint,\n}: {\n  props: any;\n  theme: any;\n  colorModeProps: object;\n  componentTheme: object;\n  currentBreakpoint: number;\n}) => {\n  let translatedProps: any = {};\n  for (const property in props) {\n    // STEP 1 - Responsive prop check and resolve\n    if (property.startsWith('_')) {\n      // STEP 1.a - Resolving _ porps\n      const nestedTranslatedProps = propTranslator({\n        props: props[property],\n        theme,\n        colorModeProps,\n        componentTheme,\n        currentBreakpoint,\n      });\n      translatedProps[property] = nestedTranslatedProps;\n    } else if (themePropertyMap[property]) {\n      // STEP 1.b Resolving themed props\n      const propValues = extractPropertyFromFunction(\n        property,\n        props,\n        theme,\n        componentTheme\n      );\n\n      // NOTE: Direct value identified.\n      if (typeof propValues === 'string' || typeof propValues === 'number') {\n        translatedProps[property] = propValues;\n        // NOTE: Nested object (excluding _props) (To be specific, only for key exist in themePropertyMap)\n      } else if (!isNil(propValues)) {\n        // TODO: This setion new needs to handle stuff differently\n        for (let nestedProp in propValues) {\n          translatedProps[nestedProp] = get(\n            theme,\n            `${themePropertyMap[nestedProp]}.${propValues[nestedProp]}`,\n            propValues[nestedProp]\n          );\n        }\n        delete translatedProps[property];\n        // Manually handeling shadow props (example of Mapped tokens)\n      } else if (property === 'shadow') {\n        const resolveValueWithBreakpointValue = resolveValueWithBreakpoint(\n          props.shadow,\n          currentBreakpoint,\n          property\n        );\n        let shadowProps = theme[themePropertyMap[property]](colorModeProps)[\n          resolveValueWithBreakpointValue\n        ];\n        translatedProps.style = merge({}, shadowProps, props.style);\n        delete translatedProps[property];\n      } else {\n        translatedProps[property] = resolveValueWithBreakpoint(\n          props[property],\n          currentBreakpoint,\n          property\n        );\n      }\n    } else {\n      // STEP 1.d Resolving Direct Values\n      translatedProps[property] = resolveValueWithBreakpoint(\n        props[property],\n        currentBreakpoint,\n        property\n      );\n    }\n  }\n\n  return translatedProps;\n};\n\n// remove it while removing styled components.\nconst propsThatCannotHoldNegativityWithStrings = [\n  'm',\n  'margin',\n  'padding',\n  'p',\n];\n\n// remove it while removing styled components.\nconst mutatePropToHandleNegativeVal = (theme: any, props: any, key: any) => {\n  if (props[key] in theme.space) {\n    return;\n  }\n\n  if (typeof props[key] === 'string' && props[key].startsWith('-')) {\n    const parsedNum = +props[key];\n    // converts '-8' to -8\n    if (!isNaN(parsedNum)) {\n      props[key] = parsedNum;\n    } else if (props[key] === '-') {\n      props[key] = undefined;\n    }\n  }\n};\n\n/**\n * @summary Combines provided porps with component's theme props and resloves them.\n * @description NOTE: Avoid passing JSX and functions.\n * @arg {string} component - Name of the component.\n * @arg {object} incomingProps - Props passed by the user.\n * @returns {object} Resolved props.\n */\nexport function usePropsResolution(component: string, incomingProps: any) {\n  const [ignoredProps, cleanIncomingProps] = extractInObject(incomingProps, [\n    'children',\n    'onPress',\n    'icon',\n    'onOpen',\n    'onClose',\n  ]);\n  const { theme } = useNativeBase();\n  const colorModeProps = useColorMode();\n\n  const componentTheme = get(theme, `components.${component}`);\n  const notComponentTheme = omit(theme, ['components']);\n  const windowWidth = useWindowDimensions()?.width;\n\n  const currentBreakpoint = React.useMemo(\n    () => getClosestBreakpoint(theme.breakpoints, windowWidth),\n    [windowWidth, theme.breakpoints]\n  );\n\n  // TODO: using usePlatformProps here to simplify the component theme. So that on on component level it shouldn't have to maintain the Specificity.\n  const componentThemeObject = usePlatformProps(\n    simplifyComponentTheme(\n      notComponentTheme,\n      componentTheme,\n      cleanIncomingProps,\n      colorModeProps,\n      currentBreakpoint\n    )\n  );\n  const componentThemeIntegratedProps = merge(\n    {},\n    componentThemeObject,\n    cleanIncomingProps\n  );\n  const platformSpecificProps = usePlatformProps(componentThemeIntegratedProps);\n\n  // NOTE: sperating removing props while should be translated\n  let ignore: any = [];\n  if (\n    platformSpecificProps.bg?.linearGradient ||\n    platformSpecificProps.background?.linearGradient ||\n    platformSpecificProps.bgColor?.linearGradient ||\n    platformSpecificProps.backgroundColor?.linearGradient\n  ) {\n    let bgProp = 'bg';\n    if (platformSpecificProps.background?.linearGradient) {\n      bgProp = 'background';\n    } else if (platformSpecificProps.bgColor?.linearGradient) {\n      bgProp = 'bgColor';\n    } else if (platformSpecificProps.backgroundColor?.linearGradient) {\n      bgProp = 'backgroundColor';\n    }\n    platformSpecificProps[bgProp].linearGradient.colors = platformSpecificProps[\n      bgProp\n    ].linearGradient.colors.map((color: string) => {\n      return get(theme.colors, color, color);\n    });\n    ignore = ['bg', 'background', 'backgroundColor', 'bgColor'];\n  }\n  // NOTE: seprating bg props when linearGardiant is available\n  const [gradientProps, nonGradientProps] = extractInObject(\n    platformSpecificProps,\n    ignore\n  );\n\n  const translatedProps = propTranslator({\n    props: nonGradientProps,\n    theme: notComponentTheme,\n    colorModeProps,\n    componentTheme,\n    currentBreakpoint,\n  });\n\n  let bgColor =\n    translatedProps.bg ??\n    translatedProps.backgroundColor ??\n    translatedProps.bgColor;\n\n  const contrastTextColor = useContrastText(\n    bgColor,\n    translatedProps?._text?.color\n  );\n\n  translatedProps._text = contrastTextColor\n    ? {\n        color: contrastTextColor,\n        ...translatedProps._text,\n      }\n    : translatedProps._text;\n\n  // Remove it while removing styled components.\n  propsThatCannotHoldNegativityWithStrings.forEach((key) => {\n    if (translatedProps && key in translatedProps) {\n      mutatePropToHandleNegativeVal(theme, translatedProps, key);\n    }\n  });\n\n  const resolvedProps = omitUndefined({\n    ...translatedProps,\n    ...ignoredProps,\n    ...gradientProps,\n  });\n\n  return resolvedProps;\n}\n"]},"metadata":{},"sourceType":"script"}