{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _Spinner = _interopRequireDefault(require(\"../Spinner\"));\n\nvar _useThemeProps = require(\"../../../hooks/useThemeProps\");\n\nvar _Box = _interopRequireDefault(require(\"../Box\"));\n\nvar _HStack = _interopRequireDefault(require(\"../Stack/HStack\"));\n\nvar _Pressable = require(\"../Pressable\");\n\nvar _this = this,\n    _jsxFileName = \"/Users/adityajamuar/Sites/projects/nativebase/NativeBase/src/components/primitives/Button/Button.tsx\";\n\nvar Button = function Button(_ref, ref) {\n  var _props$accessibilityR;\n\n  var children = _ref.children,\n      isLoadingText = _ref.isLoadingText,\n      startIcon = _ref.startIcon,\n      endIcon = _ref.endIcon,\n      spinner = _ref.spinner,\n      props = (0, _objectWithoutProperties2.default)(_ref, [\"children\", \"isLoadingText\", \"startIcon\", \"endIcon\", \"spinner\"]);\n\n  var _usePropsResolution = (0, _useThemeProps.usePropsResolution)('Button', props),\n      _text = _usePropsResolution._text,\n      _hover = _usePropsResolution._hover,\n      _pressed = _usePropsResolution._pressed,\n      _focus = _usePropsResolution._focus,\n      _stack = _usePropsResolution._stack,\n      resolvedProps = (0, _objectWithoutProperties2.default)(_usePropsResolution, [\"_text\", \"_hover\", \"_pressed\", \"_focus\", \"_stack\"]);\n\n  var pressableProps = (0, _extends2.default)({}, resolvedProps, {\n    _hover: _hover,\n    _pressed: _pressed,\n    _focus: _focus\n  });\n  var isDisabled = props.isDisabled,\n      isLoading = props.isLoading;\n\n  if (endIcon && _react.default.isValidElement(endIcon)) {\n    endIcon = _react.default.Children.map(endIcon, function (child, index) {\n      return _react.default.cloneElement(child, (0, _extends2.default)({\n        key: \"button-end-icon-\" + index\n      }, _text, child.props));\n    });\n  }\n\n  if (startIcon && _react.default.isValidElement(startIcon)) {\n    startIcon = _react.default.Children.map(startIcon, function (child, index) {\n      return _react.default.cloneElement(child, (0, _extends2.default)({\n        key: \"button-start-icon-\" + index\n      }, _text, child.props));\n    });\n  }\n\n  return _react.default.createElement(_Pressable.Pressable, (0, _extends2.default)({\n    disabled: isDisabled || isLoading,\n    ref: ref\n  }, pressableProps, {\n    accessibilityRole: (_props$accessibilityR = props.accessibilityRole) != null ? _props$accessibilityR : 'button',\n    opacity: isDisabled || isLoading ? 0.5 : undefined,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }), function (_ref2) {\n    var isPressed = _ref2.isPressed,\n        isHovered = _ref2.isHovered,\n        isFocusVisible = _ref2.isFocusVisible;\n    var focusTextProps = isFocusVisible && (_focus == null ? void 0 : _focus._text) && (0, _extends2.default)({}, _focus._text);\n    var hoverTextProps = isHovered && (_hover == null ? void 0 : _hover._text) && (0, _extends2.default)({}, _hover._text);\n    var pressedTextProps = isPressed && (_pressed == null ? void 0 : _pressed._text) && (0, _extends2.default)({}, _pressed._text);\n    var boxChildren = isLoading && isLoadingText ? isLoadingText : children;\n    return _react.default.createElement(_HStack.default, (0, _extends2.default)({}, _stack, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }\n    }), startIcon && !isLoading ? startIcon : null, isLoading ? spinner ? spinner : _react.default.createElement(_Spinner.default, {\n      color: _text == null ? void 0 : _text.color,\n      size: \"sm\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }\n    }) : null, boxChildren ? _react.default.createElement(_Box.default, {\n      _text: (0, _extends2.default)({}, _text, hoverTextProps, focusTextProps, pressedTextProps),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 15\n      }\n    }, isLoading && isLoadingText ? isLoadingText : children) : null, endIcon && !isLoading ? endIcon : null);\n  });\n};\n\nvar _default = (0, _react.memo)((0, _react.forwardRef)(Button));\n\nexports.default = _default;","map":{"version":3,"sources":["Button.tsx"],"names":["Button","children","isLoadingText","startIcon","endIcon","spinner","props","_text","_hover","_pressed","_focus","_stack","resolvedProps","pressableProps","isDisabled","isLoading","React","key","child","isPressed","isHovered","isFocusVisible","focusTextProps","hoverTextProps","pressedTextProps","boxChildren"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Spinner from '../Spinner';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { default as Box, IBoxProps } from '../Box';\nimport HStack from '../Stack/HStack';\nimport { Pressable } from '../Pressable';\nimport type { IButtonProps } from './types';\n\nconst Button = (\n  {\n    children,\n    isLoadingText,\n    startIcon,\n    endIcon,\n    spinner,\n    ...props\n  }: IButtonProps & IBoxProps,\n  ref: any\n) => {\n  const {\n    _text,\n    _hover,\n    _pressed,\n    _focus,\n    _stack,\n    ...resolvedProps\n  } = usePropsResolution('Button', props);\n\n  const pressableProps = {\n    ...resolvedProps,\n    _hover,\n    _pressed,\n    _focus,\n  };\n\n  const { isDisabled, isLoading } = props;\n\n  if (endIcon && React.isValidElement(endIcon)) {\n    endIcon = React.Children.map(\n      endIcon,\n      (child: JSX.Element, index: number) => {\n        return React.cloneElement(child, {\n          key: `button-end-icon-${index}`,\n          ..._text,\n          ...child.props,\n        });\n      }\n    );\n  }\n  if (startIcon && React.isValidElement(startIcon)) {\n    startIcon = React.Children.map(\n      startIcon,\n      (child: JSX.Element, index: number) => {\n        return React.cloneElement(child, {\n          key: `button-start-icon-${index}`,\n          ..._text,\n          ...child.props,\n        });\n      }\n    );\n  }\n\n  return (\n    <Pressable\n      disabled={isDisabled || isLoading}\n      ref={ref}\n      {...pressableProps}\n      accessibilityRole={props.accessibilityRole ?? 'button'}\n      opacity={isDisabled || isLoading ? 0.5 : undefined}\n    >\n      {/* TODO : Replace Render props with Context Hook */}\n      {({ isPressed, isHovered, isFocusVisible }: any) => {\n        const focusTextProps = isFocusVisible &&\n          _focus?._text && { ..._focus._text };\n        const hoverTextProps = isHovered &&\n          _hover?._text && { ..._hover._text };\n        const pressedTextProps = isPressed &&\n          _pressed?._text && { ..._pressed._text };\n\n        const boxChildren =\n          isLoading && isLoadingText ? isLoadingText : children;\n\n        return (\n          <HStack {..._stack}>\n            {startIcon && !isLoading ? startIcon : null}\n            {isLoading ? (\n              spinner ? (\n                spinner\n              ) : (\n                <Spinner color={_text?.color} size=\"sm\" />\n              )\n            ) : null}\n            {boxChildren ? (\n              <Box\n                _text={{\n                  ..._text,\n                  ...hoverTextProps,\n                  ...focusTextProps,\n                  ...pressedTextProps,\n                }}\n              >\n                {isLoading && isLoadingText ? isLoadingText : children}\n              </Box>\n            ) : null}\n            {endIcon && !isLoading ? endIcon : null}\n          </HStack>\n        );\n      }}\n    </Pressable>\n  );\n};\n\nexport default memo(forwardRef(Button));\n"]},"metadata":{},"sourceType":"script"}