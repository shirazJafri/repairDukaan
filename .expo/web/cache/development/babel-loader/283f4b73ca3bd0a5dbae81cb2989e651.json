{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _Modal = require(\"../../composites/Modal\");\n\nvar _hooks = require(\"../../../hooks\");\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _this = this,\n    _jsxFileName = \"/Users/adityajamuar/Sites/projects/nativebase/NativeBase/src/components/composites/Actionsheet/Actionsheet.tsx\";\n\nvar Actionsheet = function Actionsheet(_ref, ref) {\n  var children = _ref.children,\n      props = (0, _objectWithoutProperties2.default)(_ref, [\"children\"]);\n\n  var _usePropsResolution = (0, _hooks.usePropsResolution)('Actionsheet', props),\n      isOpen = _usePropsResolution.isOpen,\n      disableOverlay = _usePropsResolution.disableOverlay,\n      onClose = _usePropsResolution.onClose,\n      newProps = (0, _objectWithoutProperties2.default)(_usePropsResolution, [\"isOpen\", \"disableOverlay\", \"onClose\"]);\n\n  var pan = _react.default.useRef(new _reactNative.Animated.ValueXY()).current;\n\n  var sheetHeight = _react.default.useRef(0);\n\n  _react.default.useEffect(function () {\n    if (!isOpen) {\n      setTimeout(function () {\n        pan.setValue({\n          x: 0,\n          y: 0\n        });\n      }, 250);\n    }\n  }, [isOpen, pan]);\n\n  var panResponder = _react.default.useRef(_reactNative.PanResponder.create({\n    onMoveShouldSetPanResponder: function onMoveShouldSetPanResponder(_evt, gestureState) {\n      return gestureState.dx !== 0 || gestureState.dy !== 0;\n    },\n    onPanResponderMove: function onPanResponderMove(e, gestureState) {\n      if (gestureState.dy > 0) {\n        _reactNative.Animated.event([null, {\n          dy: pan.y\n        }], {\n          useNativeDriver: false\n        })(e, gestureState);\n      }\n    },\n    onPanResponderRelease: function onPanResponderRelease(_e, gestureState) {\n      if (sheetHeight.current / 4 - gestureState.dy < 0) {\n        _reactNative.Animated.timing(pan, {\n          toValue: {\n            x: 0,\n            y: sheetHeight.current\n          },\n          duration: 150,\n          useNativeDriver: true\n        }).start(function () {\n          onClose();\n        });\n      } else {\n        _reactNative.Animated.spring(pan, {\n          toValue: {\n            x: 0,\n            y: 0\n          },\n          overshootClamping: true,\n          useNativeDriver: true\n        }).start();\n      }\n    }\n  })).current;\n\n  return _react.default.createElement(_Modal.Modal, (0, _extends2.default)({\n    isOpen: isOpen,\n    onClose: onClose,\n    justifyContent: \"flex-end\",\n    animationPreset: \"slide\"\n  }, newProps, {\n    overlayVisible: disableOverlay ? false : true,\n    closeOnOverlayClick: disableOverlay ? false : true,\n    ref: ref,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }), _react.default.createElement(_reactNative.Animated.View, (0, _extends2.default)({\n    style: {\n      transform: [{\n        translateY: pan.y\n      }],\n      width: '100%'\n    },\n    onLayout: function onLayout(event) {\n      var height = event.nativeEvent.layout.height;\n      sheetHeight.current = height;\n    }\n  }, panResponder.panHandlers, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }), children));\n};\n\nvar _default = (0, _react.memo)((0, _react.forwardRef)(Actionsheet));\n\nexports.default = _default;","map":{"version":3,"sources":["Actionsheet.tsx"],"names":["Actionsheet","children","props","isOpen","disableOverlay","onClose","newProps","pan","React","Animated","sheetHeight","setTimeout","x","y","panResponder","PanResponder","onMoveShouldSetPanResponder","gestureState","onPanResponderMove","dy","useNativeDriver","onPanResponderRelease","toValue","duration","overshootClamping","transform","translateY","width","height","event"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Modal } from '../../composites/Modal';\nimport type { IActionsheetProps } from './types';\nimport { usePropsResolution } from '../../../hooks';\nimport { Animated, PanResponder } from 'react-native';\n\nconst Actionsheet = ({ children, ...props }: IActionsheetProps, ref: any) => {\n  const { isOpen, disableOverlay, onClose, ...newProps } = usePropsResolution(\n    'Actionsheet',\n    props\n  );\n  let pan = React.useRef(new Animated.ValueXY()).current;\n  let sheetHeight = React.useRef(0);\n\n  React.useEffect(() => {\n    if (!isOpen) {\n      // Reset value when modal close animation is completed\n      setTimeout(() => {\n        pan.setValue({\n          x: 0,\n          y: 0,\n        });\n      }, 250);\n    }\n  }, [isOpen, pan]);\n\n  const panResponder = React.useRef(\n    PanResponder.create({\n      onMoveShouldSetPanResponder: (_evt, gestureState) => {\n        // return true if user is swiping, return false if it's a single click\n        return gestureState.dx !== 0 || gestureState.dy !== 0;\n      },\n      onPanResponderMove: (e, gestureState) => {\n        if (gestureState.dy > 0) {\n          Animated.event([null, { dy: pan.y }], {\n            useNativeDriver: false,\n          })(e, gestureState);\n        }\n      },\n      onPanResponderRelease: (_e, gestureState) => {\n        // If sheet is dragged 1/4th of it's height, close it\n        if (sheetHeight.current / 4 - gestureState.dy < 0) {\n          Animated.timing(pan, {\n            toValue: { x: 0, y: sheetHeight.current },\n            duration: 150,\n            useNativeDriver: true,\n          }).start(() => {\n            onClose();\n          });\n        } else {\n          Animated.spring(pan, {\n            toValue: { x: 0, y: 0 },\n            overshootClamping: true,\n            useNativeDriver: true,\n          }).start();\n        }\n      },\n    })\n  ).current;\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      justifyContent=\"flex-end\"\n      //@ts-ignore - internal use only\n      animationPreset=\"slide\"\n      {...newProps}\n      overlayVisible={disableOverlay ? false : true}\n      closeOnOverlayClick={disableOverlay ? false : true}\n      ref={ref}\n    >\n      <Animated.View\n        style={{\n          transform: [{ translateY: pan.y }],\n          width: '100%',\n        }}\n        onLayout={(event) => {\n          const { height } = event.nativeEvent.layout;\n          sheetHeight.current = height;\n        }}\n        {...panResponder.panHandlers}\n      >\n        {children}\n      </Animated.View>\n    </Modal>\n  );\n};\n\nexport default memo(forwardRef(Actionsheet));\n"]},"metadata":{},"sourceType":"script"}