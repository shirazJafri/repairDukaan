{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _native = _interopRequireDefault(require(\"styled-components/native\"));\n\nvar _styledSystem = require(\"styled-system\");\n\nvar _useThemeProps = require(\"../../../hooks/useThemeProps\");\n\nvar _hooks = require(\"../../../hooks\");\n\nvar _useSpinner2 = require(\"./useSpinner\");\n\nvar _this = this,\n    _jsxFileName = \"/Users/adityajamuar/Sites/projects/nativebase/NativeBase/src/components/primitives/Spinner/index.tsx\";\n\nvar StyledSpinner = (0, _native.default)(_reactNative.ActivityIndicator)(_styledSystem.color, _styledSystem.space, _styledSystem.position);\n\nvar Spinner = function Spinner(props, ref) {\n  var newProps = (0, _useThemeProps.usePropsResolution)('Spinner', props);\n  var spinnerColor = (0, _hooks.useToken)('colors', newProps.color);\n\n  var _useSpinner = (0, _useSpinner2.useSpinner)(props),\n      spinnerProps = _useSpinner.spinnerProps;\n\n  return _react.default.createElement(StyledSpinner, (0, _extends2.default)({}, spinnerProps, newProps, {\n    color: spinnerColor,\n    ref: ref,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }));\n};\n\nvar _default = (0, _react.memo)((0, _react.forwardRef)(Spinner));\n\nexports.default = _default;","map":{"version":3,"sources":["index.tsx"],"names":["StyledSpinner","ActivityIndicator","color","space","position","Spinner","newProps","spinnerColor","spinnerProps"],"mappings":";;;;;;;;;;;AAAA,IAAA,MAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;;;AAEA,IAAA,OAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,0BAAA,CAAA,CAAA;;AACA,IAAA,aAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AACA,IAAA,cAAA,GAAA,OAAA,gCAAA;;AACA,IAAA,MAAA,GAAA,OAAA,kBAAA;;AAEA,IAAA,YAAA,GAAA,OAAA,gBAAA;;;;;AAmBA,IAAMA,aAAa,GAAG,CAAA,GAAA,OAAA,CAAA,OAAA,EAAOC,YAAAA,CAAP,iBAAA,EACpBC,aAAAA,CADoB,KAAA,EAEpBC,aAAAA,CAFoB,KAAA,EAGpBC,aAAAA,CAHF,QAAsB,CAAtB;;AAKA,IAAMC,OAAO,GAAPA,SAAAA,OAAAA,CAAU,KAAVA,EAAU,GAAVA,EAA8C;AAClD,MAAMC,QAAQ,GAAG,CAAA,GAAA,cAAA,CAAA,kBAAA,EAAA,SAAA,EAAjB,KAAiB,CAAjB;AACA,MAAMC,YAAY,GAAG,CAAA,GAAA,MAAA,CAAA,QAAA,EAAA,QAAA,EAAmBD,QAAQ,CAAhD,KAAqB,CAArB;;AAFkD,MAAA,WAAA,GAGzB,CAAA,GAAA,YAAA,CAAA,UAAA,EAHyB,KAGzB,CAHyB;AAAA,MAG1CE,YAH0C,GAAA,WAAA,CAAA,YAAA;;AA6BlD,SACE,MAAA,CAAA,OAAA,CAAA,aAAA,CAAA,aAAA,EAAA,CAAA,GAAA,SAAA,CAAA,OAAA,EAAA,EAAA,EAAA,YAAA,EAAA,QAAA,EAAA;AAGE,IAAA,KAAK,EAHP,YAAA;AAIE,IAAA,GAAG,EAJL,GAAA;AAAA,IAAA,MAAA,EAAA,KAAA;AAAA,IAAA,QAAA,EAAA;AAAA,MAAA,QAAA,EAAA,YAAA;AAAA,MAAA,UAAA,EAAA,EAAA;AAAA,MAAA,YAAA,EADF;AACE;AAAA,GAAA,CAAA,CADF;AA7BF,CAAA;;eAgGe,CAAA,GAAA,MAAA,CAAA,IAAA,EAAK,CAAA,GAAA,MAAA,CAAA,UAAA,EAAL,OAAK,CAAL,C","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { ActivityIndicator } from 'react-native';\nimport styled from 'styled-components/native';\nimport { color, space, position } from 'styled-system';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useToken } from '../../../hooks';\nimport type { ISpinnerProps } from './types';\nimport { useSpinner } from './useSpinner';\n// import type { IBoxProps } from '../Box';\n// import { customLayout, customPosition } from '../../../utils/customProps';\n// import {\n//   Default,\n//   Dotted,\n//   MultiColorDotted,\n//   Stroked,\n//   SquareDotted,\n// } from './variants';\n\n// const StyleAnimatedView = styled(Animated.View)<IBoxProps>(\n//   color,\n//   border,\n//   position,\n//   customPosition,\n//   customLayout\n// );\n\nconst StyledSpinner = styled(ActivityIndicator)<ISpinnerProps>(\n  color,\n  space,\n  position\n);\nconst Spinner = (props: ISpinnerProps, ref: any) => {\n  const newProps = usePropsResolution('Spinner', props);\n  const spinnerColor = useToken('colors', newProps.color);\n  const { spinnerProps } = useSpinner(props);\n  // const iconSize: any = { sm: 10, lg: 20 };\n\n  // const degree: any = new Animated.Value(0);\n  // Animated.loop(\n  //   Animated.timing(degree, {\n  //     toValue: 1,\n  //     duration: newProps.duration ?? 1900,\n  //     easing: Easing.linear,\n  //     useNativeDriver: false,\n  //   })\n  // ).start();\n\n  // const styles = StyleSheet.create({\n  //   animateStyle: {\n  //     transform: [\n  //       {\n  //         rotateZ: degree.interpolate({\n  //           inputRange: [0, 1],\n  //           outputRange: ['0deg', '360deg'],\n  //         }),\n  //       },\n  //     ],\n  //   },\n  // });\n  // if (!newProps.variant) {\n  return (\n    <StyledSpinner\n      {...spinnerProps}\n      {...newProps}\n      color={spinnerColor}\n      ref={ref}\n    />\n  );\n  // } else {\n  //   if (newProps.variant === 'custom' && renderProp) {\n  //     return (\n  //       <StyleAnimatedView style={styles.animateStyle}>\n  //         {renderProp}\n  //       </StyleAnimatedView>\n  //     );\n  //   } else {\n  //     let SpinnerVariant = null;\n  //     switch (newProps.variant) {\n  //       case 'dotted':\n  //         SpinnerVariant = (\n  //           <Dotted\n  //             color={spinnerColor}\n  //             size={props.size ? iconSize[props.size] : 12}\n  //           />\n  //         );\n  //         break;\n  //       case 'multiColorDotted':\n  //         SpinnerVariant = (\n  //           <MultiColorDotted\n  //             color={spinnerColor}\n  //             size={props.size ? iconSize[props.size] : 12}\n  //           />\n  //         );\n  //         break;\n  //       case 'stroked':\n  //         SpinnerVariant = (\n  //           <Stroked\n  //             color={spinnerColor}\n  //             size={props.size ? iconSize[props.size] : 12}\n  //           />\n  //         );\n  //         break;\n  //       case 'squareDotted':\n  //         SpinnerVariant = (\n  //           <SquareDotted\n  //             color={spinnerColor}\n  //             size={props.size ? iconSize[props.size] : 12}\n  //           />\n  //         );\n  //         break;\n  //       default:\n  //         SpinnerVariant = (\n  //           <Default\n  //             color={spinnerColor}\n  //             size={props.size ? iconSize[props.size] : 12}\n  //           />\n  //         );\n  //     }\n  //     return (\n  //       <StyleAnimatedView style={styles.animateStyle}>\n  //         {SpinnerVariant}\n  //       </StyleAnimatedView>\n  //     );\n  //   }\n  // }\n};\n\nexport default memo(forwardRef(Spinner));\nexport type { ISpinnerProps };\n"]},"metadata":{},"sourceType":"script"}