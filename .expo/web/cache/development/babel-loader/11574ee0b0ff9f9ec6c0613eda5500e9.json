{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useClipboard = useClipboard;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nfunction useClipboard() {\n  var _React$useState = _react.default.useState(false),\n      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n      hasCopied = _React$useState2[0],\n      setHasCopied = _React$useState2[1];\n\n  var _React$useState3 = _react.default.useState(''),\n      _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),\n      value = _React$useState4[0],\n      setValue = _React$useState4[1];\n\n  var onCopy = function onCopy(copiedValue) {\n    var textField;\n    return _regenerator.default.async(function onCopy$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(typeof window !== 'undefined')) {\n              _context.next = 9;\n              break;\n            }\n\n            textField = document.createElement('textarea');\n            textField.innerText = copiedValue;\n            document.body.appendChild(textField);\n\n            if (window.navigator.platform === 'iPhone') {\n              textField.setSelectionRange(0, 99999);\n            } else {\n              textField.select();\n            }\n\n            document.execCommand('copy');\n            textField.remove();\n            _context.next = 12;\n            break;\n\n          case 9:\n            if (!(_reactNative.NativeModules && _reactNative.NativeModules.Clipboard)) {\n              _context.next = 12;\n              break;\n            }\n\n            _context.next = 12;\n            return _regenerator.default.awrap(_reactNative.NativeModules.Clipboard.setString(copiedValue));\n\n          case 12:\n            setValue(copiedValue);\n            setHasCopied(true);\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return {\n    value: value,\n    onCopy: onCopy,\n    hasCopied: hasCopied\n  };\n}","map":{"version":3,"sources":["useClipboard.ts"],"names":["hasCopied","setHasCopied","React","value","setValue","onCopy","textField","document","window","NativeModules"],"mappings":";;;;;;;;;;;AAAA,IAAA,MAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;;;AAGO,SAAA,YAAA,GAAwB;AAAA,MAAA,eAAA,GACKE,MAAAA,CAAAA,OAAAA,CAAAA,QAAAA,CADL,KACKA,CADL;AAAA,MAAA,gBAAA,GAAA,CAAA,GAAA,eAAA,CAAA,OAAA,EAAA,eAAA,EAAA,CAAA,CAAA;AAAA,MACtBF,SADsB,GAAA,gBAAA,CAAA,CAAA,CAAA;AAAA,MACXC,YADW,GAAA,gBAAA,CAAA,CAAA,CAAA;;AAAA,MAAA,gBAAA,GAEHC,MAAAA,CAAAA,OAAAA,CAAAA,QAAAA,CAFG,EAEHA,CAFG;AAAA,MAAA,gBAAA,GAAA,CAAA,GAAA,eAAA,CAAA,OAAA,EAAA,gBAAA,EAAA,CAAA,CAAA;AAAA,MAEtBC,KAFsB,GAAA,gBAAA,CAAA,CAAA,CAAA;AAAA,MAEfC,QAFe,GAAA,gBAAA,CAAA,CAAA,CAAA;;AAG7B,MAAMC,MAAM,GAANA,SAAAA,MAAAA,CAAS,WAATA,EAAS;AAAA,QAAA,SAAA;AAAA,WAAA,YAAA,CAAA,OAAA,CAAA,KAAA,CAAA,SAAA,OAAA,CAAA,QAAA,EAAA;AAAA,aAAA,CAAA,EAAA;AAAA,gBAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;AAAA,eAAA,CAAA;AAAA,gBAAA,EACT,OAAA,MAAA,KADS,WAAA,CAAA,EAAA;AAAA,cAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAAA;AAELC;;AAAAA,YAAAA,SAFK,GAEOC,QAAQ,CAARA,aAAAA,CAFP,UAEOA,CAAZD;AACNA,YAAAA,SAAS,CAATA,SAAAA,GAAAA,WAAAA;AACAC,YAAAA,QAAQ,CAARA,IAAAA,CAAAA,WAAAA,CAAAA,SAAAA;;AACA,gBAAIC,MAAM,CAANA,SAAAA,CAAAA,QAAAA,KAAJ,QAAA,EAA4C;AAC1CF,cAAAA,SAAS,CAATA,iBAAAA,CAAAA,CAAAA,EAAAA,KAAAA;AADF,aAAA,MAEO;AACLA,cAAAA,SAAS,CAATA,MAAAA;AAEFC;;AAAAA,YAAAA,QAAQ,CAARA,WAAAA,CAAAA,MAAAA;AACAD,YAAAA,SAAS,CAATA,MAAAA;AAXW,YAAA,QAAA,CAAA,IAAA,GAAA,EAAA;AAAA;;AAAA,eAAA,CAAA;AAAA,gBAAA,EAYFG,YAAAA,CAAAA,aAAAA,IAAiBA,YAAAA,CAAAA,aAAAA,CAZf,SAAA,CAAA,EAAA;AAAA,cAAA,QAAA,CAAA,IAAA,GAAA,EAAA;AAAA;AAAA;;AAAA,YAAA,QAAA,CAAA,IAAA,GAAA,EAAA;AAAA,mBAAA,YAAA,CAAA,OAAA,CAAA,KAAA,CAaLA,YAAAA,CAAAA,aAAAA,CAAAA,SAAAA,CAAAA,SAAAA,CAbK,WAaLA,CAbK,CAAA;;AAAA,eAAA,EAAA;AAebL,YAAAA,QAAQ,CAARA,WAAQ,CAARA;AACAH,YAAAA,YAAY,CAAZA,IAAY,CAAZA;;AAhBa,eAAA,EAAA;AAAA,eAAA,KAAA;AAAA,mBAAA,QAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,CAAA;AAAf,GAAA;;AAkBA,SAAO;AACLE,IAAAA,KAAK,EADA,KAAA;AAELE,IAAAA,MAAM,EAFD,MAAA;AAGLL,IAAAA,SAAS,EAHX;AAAO,GAAP;AAKD","sourcesContent":["import React from 'react';\nimport { NativeModules } from 'react-native';\n\nexport function useClipboard() {\n  const [hasCopied, setHasCopied] = React.useState(false);\n  const [value, setValue] = React.useState<string>('');\n  const onCopy = async (copiedValue: string) => {\n    if (typeof window !== 'undefined') {\n      const textField = document.createElement('textarea');\n      textField.innerText = copiedValue;\n      document.body.appendChild(textField);\n      if (window.navigator.platform === 'iPhone') {\n        textField.setSelectionRange(0, 99999);\n      } else {\n        textField.select();\n      }\n      document.execCommand('copy');\n      textField.remove();\n    } else if (NativeModules && NativeModules.Clipboard) {\n      await NativeModules.Clipboard.setString(copiedValue);\n    }\n    setValue(copiedValue);\n    setHasCopied(true);\n  };\n  return {\n    value,\n    onCopy,\n    hasCopied,\n  };\n}\n"]},"metadata":{},"sourceType":"script"}